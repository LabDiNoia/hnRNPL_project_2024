filt_allSplice_dt
filt_allSplice_dt
filt_allSplice_dt<-allSplice_dt[junc_mean_counts>=0 &
FDR<0.1 &
abs(IncLevelDifference)>=0.1 &
abs(IncLevelDifference)<=0.95 &
IncLev_max_diff>0.05]
filt_allSplice_dt
filt_allSplice_dt
filt_allSplice_dt[ ,n_in_covFilt0=.N,dataset]
filt_allSplice_dt[ ,.(n_in_covFilt0=.N),dataset]
merge(info_dt, filt_allSplice_dt[ ,.(n_in_covFilt0=.N),dataset])
info_dt <- fread("refrFiles/datasets_readLen_SEPE_info.txt")
all_mqc_star <- data.table()
for (cur_dataset in datasets) {
cur_mqc_star_file_path <- paste0("../",cur_dataset,"/rna_seq/hnrnpl/results/qc_stats/multiQC_report_data/multiqc_star.txt")
mqc_star <- fread(cur_mqc_star_file_path)
mqc_star <- mqc_star[grep("2pass", Sample)]
cur_mqc_star <- mqc_star[, .(Sample, uniquely_mapped)]
cur_mqc_star[, dataset := cur_dataset]
all_mqc_star <- rbind(all_mqc_star, cur_mqc_star)
}
all_mqc_star
all_mqc_star[, .(median_counts = median(uniquely_mapped)), dataset]
all_mqc_star[, .(mean_mapped_counts = mean(uniquely_mapped)), dataset]
folders <- c("../HEK293T/","../bjFibro/","../hepg2/","../k562/","../kcytes/","../lncap/","../thymocytes/","../fetalLiv/","../actb_d1/")
datasets <- basename(folders)
mouse_or_human_dt <-  data.table(dataset = datasets, mouse_or_human = c(rep("human", 6), rep("mouse", 3)))
#cur_dataset<-datasets[1]
info_dt <- fread("refrFiles/datasets_readLen_SEPE_info.txt")
info_dt <- fread("refrFiles/datasets_readLen_SEPE_info.txt")
all_mqc_star <- data.table()
for (cur_dataset in datasets) {
cur_mqc_star_file_path <- paste0("../",cur_dataset,"/rna_seq/hnrnpl/results/qc_stats/multiQC_report_data/multiqc_star.txt")
mqc_star <- fread(cur_mqc_star_file_path)
mqc_star <- mqc_star[grep("2pass", Sample)]
cur_mqc_star <- mqc_star[, .(Sample, uniquely_mapped)]
cur_mqc_star[, dataset := cur_dataset]
all_mqc_star <- rbind(all_mqc_star, cur_mqc_star)
}
all_mqc_star
all_mqc_star[, .(median_counts = median(uniquely_mapped)), dataset]
all_mqc_star[, .(mean_mapped_counts = mean(uniquely_mapped)), dataset]
info_dt <- merge(info_dt, all_mqc_star[, .(mean_mapped_counts = mean(uniquely_mapped)), dataset])
info_dt$Description <- c("HEK293T", "Activated B", "BJ", "Fetal liver", "HepG2", "K562", "Keratinocytes", "LNCaP", "Thymocytes")
info_dt
# calculate number of splicing changes
allSplice_dt<-readRDS("./R_rds_files/allSplice_dt.rds")
filt_allSplice_dt<-allSplice_dt[junc_mean_counts>=0 &
FDR<0.1 &
abs(IncLevelDifference)>=0.1 &
abs(IncLevelDifference)<=0.95 &
IncLev_max_diff>0.05]
merge(info_dt, filt_allSplice_dt[ ,.(n_in_covFilt0=.N),dataset])
info_dt<-merge(info_dt, filt_allSplice_dt[ ,.(n_in_covFilt0=.N),dataset])
#coverage filter of 10
filt_allSplice_dt<-allSplice_dt[junc_mean_counts>=10 &
FDR<0.1 &
abs(IncLevelDifference)>=0.1 &
abs(IncLevelDifference)<=0.95 &
IncLev_max_diff>0.05]
filt_allSplice_dt[ ,.(n_in_covFilt10=.N),dataset]
merge(info_dt, filt_allSplice_dt[ ,.(n_in_covFilt10=.N),dataset])
info_dt<-merge(info_dt, filt_allSplice_dt[ ,.(n_in_covFilt10=.N),dataset])
info_dt
filt_allSplice_dt[ ,.(n_in_covFilt0=.N, ngenes_in_covFilt0=length(unique(GeneID))),dataset]
#coverage filter of 0
filt_allSplice_dt<-allSplice_dt[junc_mean_counts>=0 &
FDR<0.1 &
abs(IncLevelDifference)>=0.1 &
abs(IncLevelDifference)<=0.95 &
IncLev_max_diff>0.05]
info_dt<-merge(info_dt, filt_allSplice_dt[ ,.(n_in_covFilt0=.N, ngenes_in_covFilt0=length(unique(GeneID))),dataset])
#cur_dataset<-datasets[1]
info_dt <- fread("refrFiles/datasets_readLen_SEPE_info.txt")
info_dt <- fread("refrFiles/datasets_readLen_SEPE_info.txt")
all_mqc_star <- data.table()
for (cur_dataset in datasets) {
cur_mqc_star_file_path <- paste0("../",cur_dataset,"/rna_seq/hnrnpl/results/qc_stats/multiQC_report_data/multiqc_star.txt")
mqc_star <- fread(cur_mqc_star_file_path)
mqc_star <- mqc_star[grep("2pass", Sample)]
cur_mqc_star <- mqc_star[, .(Sample, uniquely_mapped)]
cur_mqc_star[, dataset := cur_dataset]
all_mqc_star <- rbind(all_mqc_star, cur_mqc_star)
}
all_mqc_star
all_mqc_star[, .(median_counts = median(uniquely_mapped)), dataset]
all_mqc_star[, .(mean_mapped_counts = mean(uniquely_mapped)), dataset]
info_dt <- merge(info_dt, all_mqc_star[, .(mean_mapped_counts = mean(uniquely_mapped)), dataset])
info_dt$Description <- c("HEK293T", "Activated B", "BJ", "Fetal liver", "HepG2", "K562", "Keratinocytes", "LNCaP", "Thymocytes")
# calculate number of splicing changes
allSplice_dt<-readRDS("./R_rds_files/allSplice_dt.rds")
#coverage filter of 0
filt_allSplice_dt<-allSplice_dt[junc_mean_counts>=0 &
FDR<0.1 &
abs(IncLevelDifference)>=0.1 &
abs(IncLevelDifference)<=0.95 &
IncLev_max_diff>0.05]
info_dt<-merge(info_dt, filt_allSplice_dt[ ,.(n_in_covFilt0=.N, ngenes_in_covFilt0=length(unique(GeneID))),dataset])
info_dt
#coverage filter of 10
filt_allSplice_dt<-allSplice_dt[junc_mean_counts>=10 &
FDR<0.1 &
abs(IncLevelDifference)>=0.1 &
abs(IncLevelDifference)<=0.95 &
IncLev_max_diff>0.05]
info_dt<-merge(info_dt, filt_allSplice_dt[ ,.(n_in_covFilt10=.N, ngenes_in_covFilt10=length(unique(GeneID))),dataset])
info_dt
write.table(info_dt, "R_rds_files/splicingEventCounts_vs_factors_datatableFilt.txt", sep = "\t", row.names = F, quote = F)
getwd()
for_fig_dt <-melt(info_dt, variable.name="cov_filter", value.name="event_counts", id.vars=1:7, measure.vars=c(8,10))
for_fig_dt
#pdf("figures/splicingEventCounts_vs_factors_datatableFilt.pdf",useDingbats=F,height=8,width=8)
library(ggplot2)
library(egg)
require(ggrepel)
p1 <- ggplot(for_fig_dt, aes(mean_mapped_counts, event_counts, shape = SE_or_PE, color = as.factor(read_length))) +
geom_point(size = 3) +
scale_y_continuous(limits = c(0, 20000), name = "Number of splicing changes") +
scale_x_continuous(limits = c(0, 100000000), name = "Averarge mapped read counts") +
scale_color_manual(values = c("light grey", "grey", "orange", "dark orange", "red")) +
geom_text_repel(aes(label = Description), color = "black", size = 3, box.padding = 0.125) +
facet_wrap( ~ cov_filter, scales = "free") +
theme_classic() +
theme(text = element_text(family = "sans"),
axis.line = element_line(color = 'black', linewidth = 0.125),
axis.ticks = element_line(colour = "black", linewidth = 0.125),
axis.title = element_text(size = 7),
axis.text.y = element_text(size = 6),
axis.text.x = element_text(size = 6))
p1
pdf("figures/splicingEventCounts_vs_factors_datatableFilt.pdf",useDingbats=F,height=8,width=8)
#pdf("figures/splicingEventCounts_vs_factors_datatableFilt.pdf",useDingbats=F,height=8,width=8)
library(ggplot2)
library(egg)
require(ggrepel)
p1 <- ggplot(for_fig_dt, aes(mean_mapped_counts, event_counts, shape = SE_or_PE, color = as.factor(read_length))) +
geom_point(size = 3) +
scale_y_continuous(limits = c(0, 20000), name = "Number of splicing changes") +
scale_x_continuous(limits = c(0, 100000000), name = "Averarge mapped read counts") +
scale_color_manual(values = c("light grey", "grey", "orange", "dark orange", "red")) +
geom_text_repel(aes(label = Description), color = "black", size = 3, box.padding = 0.125) +
facet_wrap( ~ cov_filter, scales = "free") +
theme_classic() +
theme(text = element_text(family = "sans"),
axis.line = element_line(color = 'black', linewidth = 0.125),
axis.ticks = element_line(colour = "black", linewidth = 0.125),
axis.title = element_text(size = 7),
axis.text.y = element_text(size = 6),
axis.text.x = element_text(size = 6))
grid.arrange(grobs = lapply(list(p1), set_panel_size, width = unit(4, "cm"), height = unit(4, "cm")))
dev.off()
grid.arrange(grobs = lapply(list(p1), set_panel_size, width = unit(4, "cm"), height = unit(4, "cm")))
p1 <- ggplot(for_fig_dt[cov_filter=="n_in_covFilt10"], aes(mean_mapped_counts, event_counts, shape = SE_or_PE, color = as.factor(read_length))) +
geom_point(size = 3) +
scale_y_continuous(limits = c(0, 20000), name = "Number of splicing changes") +
scale_x_continuous(limits = c(0, 100000000), name = "Averarge mapped read counts") +
scale_color_manual(values = c("light grey", "grey", "orange", "dark orange", "red")) +
geom_text_repel(aes(label = Description), color = "black", size = 3, box.padding = 0.125) +
theme_classic() +
theme(text = element_text(family = "sans"),
axis.line = element_line(color = 'black', linewidth = 0.125),
axis.ticks = element_line(colour = "black", linewidth = 0.125),
axis.title = element_text(size = 7),
axis.text.y = element_text(size = 6),
axis.text.x = element_text(size = 6))
grid.arrange(grobs = lapply(list(p1), set_panel_size, width = unit(4, "cm"), height = unit(4, "cm")))
p1 <- ggplot(for_fig_dt[cov_filter=="n_in_covFilt10"], aes(mean_mapped_counts, event_counts, shape = SE_or_PE, color = as.factor(read_length))) +
geom_point(size = 3) +
scale_y_continuous(limits = c(0, 15000), name = "Number of splicing changes") +
scale_x_continuous(limits = c(0, 100000000), name = "Averarge mapped read counts") +
scale_color_manual(values = c("light grey", "grey", "orange", "dark orange", "red")) +
geom_text_repel(aes(label = Description), color = "black", size = 3, box.padding = 0.125) +
theme_classic() +
theme(text = element_text(family = "sans"),
axis.line = element_line(color = 'black', linewidth = 0.125),
axis.ticks = element_line(colour = "black", linewidth = 0.125),
axis.title = element_text(size = 7),
axis.text.y = element_text(size = 6),
axis.text.x = element_text(size = 6))
grid.arrange(grobs = lapply(list(p1), set_panel_size, width = unit(4, "cm"), height = unit(4, "cm")))
pdf("figures/splicingEventCounts_vs_factors_datatable_covFilt10_only.pdf",useDingbats=F,height=8,width=8)
p1 <- ggplot(for_fig_dt[cov_filter=="n_in_covFilt10"], aes(mean_mapped_counts, event_counts, shape = SE_or_PE, color = as.factor(read_length))) +
geom_point(size = 3) +
scale_y_continuous(limits = c(0, 15000), name = "Number of splicing changes") +
scale_x_continuous(limits = c(0, 100000000), name = "Averarge mapped read counts") +
scale_color_manual(values = c("light grey", "grey", "orange", "dark orange", "red")) +
geom_text_repel(aes(label = Description), color = "black", size = 3, box.padding = 0.125) +
theme_classic() +
theme(text = element_text(family = "sans"),
axis.line = element_line(color = 'black', linewidth = 0.125),
axis.ticks = element_line(colour = "black", linewidth = 0.125),
axis.title = element_text(size = 7),
axis.text.y = element_text(size = 6),
axis.text.x = element_text(size = 6))
grid.arrange(grobs = lapply(list(p1), set_panel_size, width = unit(4, "cm"), height = unit(4, "cm")))
dev.off()
p1 <- ggplot(for_fig_dt[cov_filter=="n_in_covFilt10"], aes(mean_mapped_counts, event_counts, shape = SE_or_PE, color = as.factor(read_length))) +
geom_point(size = 3) +
scale_y_continuous(limits = c(0, 12500), name = "Number of splicing changes") +
scale_x_continuous(limits = c(0, 100000000), name = "Averarge mapped read counts") +
scale_color_manual(values = c("light grey", "grey", "orange", "dark orange", "red")) +
geom_text_repel(aes(label = Description), color = "black", size = 3, box.padding = 0.125) +
theme_classic() +
theme(text = element_text(family = "sans"),
axis.line = element_line(color = 'black', linewidth = 0.125),
axis.ticks = element_line(colour = "black", linewidth = 0.125),
axis.title = element_text(size = 7),
axis.text.y = element_text(size = 6),
axis.text.x = element_text(size = 6))
grid.arrange(grobs = lapply(list(p1), set_panel_size, width = unit(4, "cm"), height = unit(4, "cm")))
p1 <- ggplot(for_fig_dt[cov_filter=="n_in_covFilt10"], aes(mean_mapped_counts, event_counts, shape = SE_or_PE, color = as.factor(read_length))) +
geom_point(size = 3) +
scale_y_continuous(limits = c(0, 12500), name = "Number of splicing changes" , breaks = rep(1:5)*2500) +
scale_x_continuous(limits = c(0, 100000000), name = "Averarge mapped read counts") +
scale_color_manual(values = c("light grey", "grey", "orange", "dark orange", "red")) +
geom_text_repel(aes(label = Description), color = "black", size = 3, box.padding = 0.125) +
theme_classic() +
theme(text = element_text(family = "sans"),
axis.line = element_line(color = 'black', linewidth = 0.125),
axis.ticks = element_line(colour = "black", linewidth = 0.125),
axis.title = element_text(size = 7),
axis.text.y = element_text(size = 6),
axis.text.x = element_text(size = 6))
grid.arrange(grobs = lapply(list(p1), set_panel_size, width = unit(4, "cm"), height = unit(4, "cm")))
pdf("figures/splicingEventCounts_vs_factors_datatable_covFilt10_only.pdf",useDingbats=F,height=8,width=8)
p1 <- ggplot(for_fig_dt[cov_filter=="n_in_covFilt10"], aes(mean_mapped_counts, event_counts, shape = SE_or_PE, color = as.factor(read_length))) +
geom_point(size = 3) +
scale_y_continuous(limits = c(0, 12500), name = "Number of splicing changes" , breaks = rep(1:5)*2500) +
scale_x_continuous(limits = c(0, 100000000), name = "Averarge mapped read counts") +
scale_color_manual(values = c("light grey", "grey", "orange", "dark orange", "red")) +
geom_text_repel(aes(label = Description), color = "black", size = 3, box.padding = 0.125) +
theme_classic() +
theme(text = element_text(family = "sans"),
axis.line = element_line(color = 'black', linewidth = 0.125),
axis.ticks = element_line(colour = "black", linewidth = 0.125),
axis.title = element_text(size = 7),
axis.text.y = element_text(size = 6),
axis.text.x = element_text(size = 6))
grid.arrange(grobs = lapply(list(p1), set_panel_size, width = unit(4, "cm"), height = unit(4, "cm")))
dev.off()
p1 <- ggplot(for_fig_dt[cov_filter=="n_in_covFilt10"], aes(mean_mapped_counts, event_counts, shape = SE_or_PE, color = as.factor(read_length))) +
geom_point(size = 3) +
scale_y_continuous(limits = c(0, 12500), name = "Number of splicing changes" , breaks = rep(0:5)*2500) +
scale_x_continuous(limits = c(0, 100000000), name = "Averarge mapped read counts") +
scale_color_manual(values = c("light grey", "grey", "orange", "dark orange", "red")) +
geom_text_repel(aes(label = Description), color = "black", size = 3, box.padding = 0.125) +
theme_classic() +
theme(text = element_text(family = "sans"),
axis.line = element_line(color = 'black', linewidth = 0.125),
axis.ticks = element_line(colour = "black", linewidth = 0.125),
axis.title = element_text(size = 7),
axis.text.y = element_text(size = 6),
axis.text.x = element_text(size = 6))
grid.arrange(grobs = lapply(list(p1), set_panel_size, width = unit(4, "cm"), height = unit(4, "cm")))
pdf("figures/splicingEventCounts_vs_factors_datatable_covFilt10_only.pdf",useDingbats=F,height=8,width=8)
p1 <- ggplot(for_fig_dt[cov_filter=="n_in_covFilt10"], aes(mean_mapped_counts, event_counts, shape = SE_or_PE, color = as.factor(read_length))) +
geom_point(size = 3) +
scale_y_continuous(limits = c(0, 12500), name = "Number of splicing changes" , breaks = rep(0:5)*2500) +
scale_x_continuous(limits = c(0, 100000000), name = "Averarge mapped read counts") +
scale_color_manual(values = c("light grey", "grey", "orange", "dark orange", "red")) +
geom_text_repel(aes(label = Description), color = "black", size = 3, box.padding = 0.125) +
theme_classic() +
theme(text = element_text(family = "sans"),
axis.line = element_line(color = 'black', linewidth = 0.125),
axis.ticks = element_line(colour = "black", linewidth = 0.125),
axis.title = element_text(size = 7),
axis.text.y = element_text(size = 6),
axis.text.x = element_text(size = 6))
grid.arrange(grobs = lapply(list(p1), set_panel_size, width = unit(4, "cm"), height = unit(4, "cm")))
dev.off()
filt_allSplice_dt
# calculate number of splicing changes
allSplice_dt<-readRDS("./R_rds_files/allSplice_dt.rds")
#coverage filter of 10
filt_allSplice_dt<-allSplice_dt[junc_mean_counts>=10 &
FDR<0.1 &
abs(IncLevelDifference)>=0.1 &
abs(IncLevelDifference)<=0.95 &
IncLev_max_diff>0.05]
filt_allSplice_dt
filt_allSplice_dt[,.N,by=c("splicing_type","dataset")]
dcast(filt_allSplice_dt[,.N,by=c("splicing_type","dataset")], dataset ~ splicing_type)
dcast(filt_allSplice_dt[,.N,by=c("splicing_type","dataset")], splicing_type ~ dataset)
dcast(filt_allSplice_dt[,.N,by=c("splicing_type","dataset")], splicing_type ~ dataset, value.var = "N")
filt_allSplice_dt[,.N,by=c("splicing_type","dataset")]
unique(filt_allSplice_dt[,.(GeneID,dataset)])
unique(filt_allSplice_dt[,.(GeneID,dataset,splicing_type)])
filt_allSplice_dt[,.(GeneID,dataset,splicing_type)]
unique(filt_allSplice_dt[,.(GeneID,dataset,splicing_type)])[,.N,by=c("splicing_type","dataset")]
dcast(unique(filt_allSplice_dt[,.(GeneID,dataset,splicing_type)])[,.N,by=c("splicing_type","dataset")], splicing_type ~ dataset, value.var = "N")
dcast(unique(filt_allSplice_dt[,.(GeneID,dataset,splicing_type)])[,.N,by=c("splicing_type","dataset")],
splicing_type ~ dataset, value.var = "N")
filt_allSplice_dt
merged_allSig_SE<-readRDS("./R_rds_files/merged_allSig_SE_withJunctionReads.rds")
merged_allSig_SE
filt_mereged_allSig_SE<-merged_allSig_SE[junc_mean_count>=10 & FDR<0.1 & abs(IncLevelDifference)>=0.1 & abs(IncLevelDifference)<=0.95 & IncLev_max_diff>0.05]
filt_mereged_allSig_SE
#make tables for the paper
filt_mereged_allSig_SE[,alt_spliced_in_n_datasets:=.N,by=commonSpliceID]
filt_mereged_allSig_SE
filt_mereged_allSig_SE[mouse_or_human=="mouse", status:=if(.N==3){"Alt spliced in all mouse datasets"}else{""}, by=commonSpliceID]
filt_mereged_allSig_SE[mouse_or_human=="human", status:=if(.N==6){"Alt spliced in all human datasets"}else{""}, by=commonSpliceID]
filt_mereged_allSig_SE[status=="Alt spliced in all mouse datasets" & alt_spliced_in_n_datasets==3, status:="Alt spliced in all mouse datasets but not in any human dataset"]
filt_mereged_allSig_SE[status=="Alt spliced in all human datasets" & alt_spliced_in_n_datasets==6, status:="Alt spliced in all human datasets but not in any mouse dataset"]
filt_mereged_allSig_SE[status=="Alt spliced in all mouse datasets but not in any human dataset"]
filt_mereged_allSig_SE[status=="Alt spliced in all human datasets but not in any mouse dataset"]
filt_mereged_allSig_SE<-filt_mereged_allSig_SE[order(commonSpliceID,mouse_or_human,dataset)]
filt_mereged_allSig_SE<-filt_mereged_allSig_SE[order(alt_spliced_in_n_datasets, decreasing=T)]
filt_mereged_allSig_SE[status=="Alt spliced in all mouse datasets but not in any human dataset"]
filt_mereged_allSig_SE[status=="Alt spliced in all human datasets but not in any mouse dataset"]
write.table(filt_mereged_allSig_SE, "./R_rds_files/allSig_SE_DSE_datatable_filt.txt", sep="\t", quote=T, row.names=F)
filt_mereged_allSig_SE
allNormcounts<-readRDS("./R_rds_files/allNormcounts.rds")
#filter here
allSig_DEG<-allNormcounts[padj<0.1 & abs(log2FoldChange)>log(1.5,2)]
allSig_DEG[,.(unique(GeneID)),dataset][,.N,dataset] #number of genes differentially expressed per dataset
#making tables for the paper (common DGEs)
allSig_DEG[log2FoldChange < 0, downreg_in_n_datasets:=.N, by=commonID ]
allSig_DEG[log2FoldChange > 0, upreg_in_n_datasets:=.N, by=commonID ]
allSig_DEG[is.na(downreg_in_n_datasets), downreg_in_n_datasets:=0]
allSig_DEG[is.na(upreg_in_n_datasets), upreg_in_n_datasets:=0]
unique(allSig_DEG[mouse_or_human=="mouse" & log2FoldChange>0, .(status=if(.N==3){"up"}else{""}), by=commonID])[status=="up",.N]
unique(allSig_DEG[mouse_or_human=="mouse" & log2FoldChange<0, .(status=if(.N==3){"up"}else{""}), by=commonID])[status=="up",.N]
allSig_DEG[mouse_or_human=="mouse" & log2FoldChange>0, status:=if(.N==3){"Upreg in all mouse datasets"}else{""}, by=commonID]
allSig_DEG[mouse_or_human=="mouse" & log2FoldChange<0, status:=if(.N==3){"Downreg in all mouse datasets"}else{""}, by=commonID]
allSig_DEG[mouse_or_human=="human" & log2FoldChange>0, status:=if(.N==6){"Upreg in all human datasets"}else{""}, by=commonID]
allSig_DEG[mouse_or_human=="human" & log2FoldChange<0, status:=if(.N==6){"Downreg in all human datasets"}else{""}, by=commonID]
allSig_DEG[status=="Upreg in all mouse datasets" & upreg_in_n_datasets==3, status:="Upreg in all mouse datasets but not in any human_dataset"]
allSig_DEG[status=="Downreg in all mouse datasets" & downreg_in_n_datasets==3, status:="Downreg in all mouse datasets but not in any human dataset"]
allSig_DEG[status=="Upreg in all human datasets" & upreg_in_n_datasets==6, status:="Upreg in all human datasets but not in any mouse dataset"]
allSig_DEG[status=="Downreg in all human datasets" & downreg_in_n_datasets==6, status:="Downreg in all human datasets but not in any mouse dataset"]
allSig_DEG[status=="Upreg in all mouse datasets but not in any human_dataset"]
allSig_DEG[status=="Downreg in all mouse datasets but not in any human dataset"]
allSig_DEG[status=="Upreg in all human datasets but not in any mouse dataset"]
allSig_DEG[status=="Downreg in all human datasets but not in any mouse dataset"]
allSig_DEG<-allSig_DEG[order(commonID,mouse_or_human,dataset)]
allSig_DEG<-allSig_DEG[order(downreg_in_n_datasets, upreg_in_n_datasets, decreasing=T)]
write.table(allSig_DEG, "./R_rds_files/allSig_DEG_FDR_L2FC_filt.txt", sep="\t", quote=T, row.names=F)
allSig_DEG
setwd("V:/Laboratoires/Di Nioa/Ganesh/binf_analyses_narval/hnrnpl_project/actb_d1/rna_seq/hnrnpl/custom_scripts")
#get all splicing data for all datasets
allSplice_dt<-readRDS("../../../../Compilation/R_rds_files/allSplice_dt.rds")
#filters for splicing
juncMeanCount_cov_filt<-10
# FDR and incLevel filters
FDR_filt<-0.1
abs_IncLevelDiff_filt<-0.1
IncLevMaxDiff_filt<-0
# filter activated B cell data only and add the above additional filters
sig_mats_dt<-allSplice_dt[dataset=="actb_d1"][junc_mean_counts>=juncMeanCount_cov_filt &
FDR<FDR_filt &
abs(IncLevelDifference)>=abs_IncLevelDiff_filt &
abs(IncLevelDifference)<=0.95 &
IncLev_max_diff>IncLevMaxDiff_filt]
sig_mats_dt
#--------------------------------------------------------------------------------#
# make splicing tables
sig_mats_dt
sig_mats_dt[,unique(splicing_type)]
splicing_types<-sig_mats_dt[,unique(splicing_type)]
file_path<-paste0("../results/rMATS/",splicing_types,".JCEC.MATS.txt")
file_path
fread(file_path[1])
file_path<-paste0("../results/rMATS/",splicing_types,".MATS.JCEC.txt")
fread(file_path[1])
cur_dt<-fread(file_path[1])
cur_spl_type<-splicing_types[1]
file_path<-paste0("../results/rMATS/",cur_spl_type,".MATS.JCEC.txt")
cur_dt<-fread(file_path)
cur_dt
sig_mats_dt[splicing_type==cur_spl_type]
sig_mats_dt[splicing_type==cur_spl_type,ID]
sig_mats_dt[splicing_type==cur_spl_type,unique(ID)]
cur_dt[,ID:=NULL]
cur_dt[ID %in% sig_mats_dt[splicing_type==cur_spl_type,unique(ID)]]
filt_cur_dt<-cur_dt[ID %in% sig_mats_dt[splicing_type==cur_spl_type,unique(ID)]]
out_file_name<-paste0("./Rds_files/sigDS_rMATS_", cur_spl_type, ".txt")
out_file_name<-paste0("./Rds_files/sigDS_rMATS_", cur_spl_type, ".txt")
out_file_name
for(cur_spl_type in splicing_types){
file_path<-paste0("../results/rMATS/",cur_spl_type,".MATS.JCEC.txt")
cur_dt<-fread(file_path)
cur_dt[,ID:=NULL]
filt_cur_dt<-cur_dt[ID %in% sig_mats_dt[splicing_type==cur_spl_type,unique(ID)]]
out_file_name<-paste0("./Rds_files/sigDS_rMATS_covFilt10_", cur_spl_type, ".txt")
write.table(filt_cur_dt, out_file_name, quote=T, row.names = F, sep="\t")
}
for(cur_spl_type in splicing_types){
file_path<-paste0("../results/rMATS/",cur_spl_type,".MATS.JCEC.txt")
cur_dt<-fread(file_path)
cur_dt[,ID:=NULL]
filt_cur_dt<-cur_dt[ID %in% sig_mats_dt[splicing_type==cur_spl_type,unique(ID)]]
out_file_name<-paste0("./Rds_files/sigDS_rMATS_covFilt10_", cur_spl_type, ".txt")
cat("Writing file for ", cur_spl_type, "...\n", sep="")
write.table(filt_cur_dt, out_file_name, quote=T, row.names = F, sep="\t")
}
filt_cur_dt
merge(filt_cur_dt,sig_mats_dt[,.(ID,junc_mean_counts)])
for(cur_spl_type in splicing_types){
file_path<-paste0("../results/rMATS/",cur_spl_type,".MATS.JCEC.txt")
cur_dt<-fread(file_path)
cur_dt[,ID:=NULL]
filt_cur_dt<-cur_dt[ID %in% sig_mats_dt[splicing_type==cur_spl_type,unique(ID)]]
filt_cur_dt<-merge(filt_cur_dt,sig_mats_dt[,.(ID,junc_mean_counts)])
out_file_name<-paste0("./Rds_files/sigDS_rMATS_covFilt10_", cur_spl_type, ".txt")
cat("Writing file for ", cur_spl_type, "...\n", sep="")
write.table(filt_cur_dt, out_file_name, quote=T, row.names = F, sep="\t")
}
IncLevMaxDiff_filt<-0.05
# filter activated B cell data only and add the above additional filters
sig_mats_dt<-allSplice_dt[dataset=="actb_d1"][junc_mean_counts>=juncMeanCount_cov_filt &
FDR<FDR_filt &
abs(IncLevelDifference)>=abs_IncLevelDiff_filt &
abs(IncLevelDifference)<=0.95 &
IncLev_max_diff>IncLevMaxDiff_filt]
sig_mats_dt
sig_mats_dt[,.N,splicing_type]
IncLevMaxDiff_filt<-0
# filter activated B cell data only and add the above additional filters
sig_mats_dt<-allSplice_dt[dataset=="actb_d1"][junc_mean_counts>=juncMeanCount_cov_filt &
FDR<FDR_filt &
abs(IncLevelDifference)>=abs_IncLevelDiff_filt &
abs(IncLevelDifference)<=0.95 &
IncLev_max_diff>IncLevMaxDiff_filt]
sig_mats_dt
sig_mats_dt[,.N,splicing_type]
IncLevMaxDiff_filt<-0.05
# filter activated B cell data only and add the above additional filters
sig_mats_dt<-allSplice_dt[dataset=="actb_d1"][junc_mean_counts>=juncMeanCount_cov_filt &
FDR<FDR_filt &
abs(IncLevelDifference)>=abs_IncLevelDiff_filt &
abs(IncLevelDifference)<=0.95 &
IncLev_max_diff>IncLevMaxDiff_filt]
sig_mats_dt
sig_mats_dt[,.N,splicing_type]
filt_cur_dt
unique(filt_cur_dt)
sig_mats_dt[splicing_type==cur_spl_type,unique(ID)]
unique(sig_mats_dt[splicing_type==cur_spl_type,unique(ID)])
sig_mats_dt[splicing_type==cur_spl_type,unique(ID)]
length(sig_mats_dt[splicing_type==cur_spl_type,unique(ID)])
cur_dt
cur_dt<-fread(file_path)
cur_dt[,ID:=NULL]
filt_cur_dt<-cur_dt[ID %in% sig_mats_dt[splicing_type==cur_spl_type,unique(ID)]]
filt_cur_dt
filt_cur_dt<-merge(filt_cur_dt,sig_mats_dt[,.(ID,junc_mean_counts)])
filt_cur_dt
filt_cur_dt<-cur_dt[ID %in% sig_mats_dt[splicing_type==cur_spl_type,unique(ID)]]
filt_cur_dt<-merge(filt_cur_dt,sig_mats_dt[splicing_type==cur_spl_type,.(ID,junc_mean_counts)])
filt_cur_dt
for(cur_spl_type in splicing_types){
file_path<-paste0("../results/rMATS/",cur_spl_type,".MATS.JCEC.txt")
cur_dt<-fread(file_path)
cur_dt[,ID:=NULL]
filt_cur_dt<-cur_dt[ID %in% sig_mats_dt[splicing_type==cur_spl_type,unique(ID)]]
filt_cur_dt<-merge(filt_cur_dt,sig_mats_dt[splicing_type==cur_spl_type,.(ID,junc_mean_counts)])
out_file_name<-paste0("./Rds_files/sigDS_rMATS_covFilt10_", cur_spl_type, ".txt")
cat("Writing file for ", cur_spl_type, "...\n", sep="")
write.table(filt_cur_dt, out_file_name, quote=T, row.names = F, sep="\t")
}
#--------------------------------------------------------------------------------#
# integrate with expression data
actb_norm_dt<-fread("../results/fcounts_deseq/normCounts.txt")
actb_norm_dt[,leg:=NULL]
actb_norm_dt[is.na(padj), leg:="0_unexpr"]
actb_norm_dt[padj<0.1 & log2FoldChange > log(1.5,2), leg:="2_upreg"] #1499
actb_norm_dt[padj<0.1 & log2FoldChange < (-log(1.5,2)), leg:="3_downreg"] #817
actb_norm_dt[is.na(leg), leg:="1_unchanged"]
actb_norm_dt[,.N,leg]
actb_norm_dt[,gene_id_noVer:=sub("\\.[0-9]*","",gene_id)]
actb_norm_dt$leg<-factor(actb_norm_dt$leg,levels=c("1_unchanged","0_unexpr","2_upreg","3_downreg"))
sig_mats_dt<-merge(sig_mats_dt,actb_norm_dt[,.(GeneID=gene_id, log2FoldChange, leg)], by="GeneID")
actb_norm_dt[grep("Ezh2",gene_name)]
sig_mats_dt
sig_mats_dt[grep("Ezh2",gene_name)]
sig_mats_dt[grep("Ezh2",geneSymbol)]
allSplice_dt
filt_allSplice<-allSplice_dt[junc_mean_counts>=juncMeanCount_cov_filt &
FDR<FDR_filt &
abs(IncLevelDifference)>=abs_IncLevelDiff_filt &
abs(IncLevelDifference)<=0.95 &
IncLev_max_diff>IncLevMaxDiff_filt]
filt_allSplice
filt_allSplice[grep("Ezh2",geneSymbol,ignore.case = T)]
actb_norm_dt[grep("Cdkn1a",gene_name)]
allSig_DEG<-readRDS("../../../../Compilation/R_rds_files/allSig_DEG.rds")
allSig_DEG[grep("Cdkn1a",gene_name,ignore.case = T)]
setwd("V:/Laboratoires/Di Nioa/Ganesh/binf_analyses_narval/hnrnpl_project/Compilation")
gobpGSEA_dt<-readRDS("./R_rds_files/all_gobp_GSEA_dt.rds")
unique(gobpGSEA_dt[padj<0.1,.(dataset,.N),by=c("pathway")][N>=4,.(pathway,N)][order(N,decreasing = T)])
gobpGSEA_dt
gobpGSEA_dt[dataset=="actb_d1"]
allGSEA_dt<-readRDS("./R_rds_files/allGSEA_dt.rds")
allGSEA_dt[dataset=="actb_d1"]
allGSEA_dt[dataset=="actb_d1" & pathway=="HALLMARK_P53_PATHWAY"]
allGSEA_dt[dataset=="actb_d1" & pathway=="HALLMARK_P53_PATHWAY", leadingEdge]
cat(allGSEA_dt[dataset=="actb_d1" & pathway=="HALLMARK_P53_PATHWAY", leadingEdge], sep="\n")
cat(allGSEA_dt[dataset=="actb_d1" & pathway=="HALLMARK_P53_PATHWAY", unlist(leadingEdge)], sep="\n")
allNormcounts_dt<-readRDS("./R_rds_files/allNormcounts.rds")
allGSEA_dt[dataset=="actb_d1" & pathway=="HALLMARK_P53_PATHWAY", unlist(leadingEdge)]
p53_leadingEdge<-allGSEA_dt[dataset=="actb_d1" & pathway=="HALLMARK_P53_PATHWAY", unlist(leadingEdge)]
allNormcounts_dt
allNormcounts_dt[,sub("\\..*","",GeneID)]
allNormcounts_dt[,geneid_noVer:=sub("\\..*","",GeneID)]
allNormcounts_dt
allNormcounts_dt[dataset=="actb_d1"][geneid_noVer %in% p53_leadingEdge]
allNormcounts_dt[dataset=="actb_d1"][geneid_noVer %in% p53_leadingEdge][order(log2FoldChange)]
allNormcounts_dt[dataset=="actb_d1"][geneid_noVer %in% p53_leadingEdge][order(log2FoldChange,decreasing = T)]
write.table(allNormcounts_dt[dataset=="actb_d1"][geneid_noVer %in% p53_leadingEdge][order(log2FoldChange,decreasing = T)], "./R_rds_files/HM_p53_leadingEdge_actB.txt", sep="\t", quote=F, row.names=F)
allNormcounts_dt[dataset=="actb_d1"][geneid_noVer %in% p53_leadingEdge][order(log2FoldChange,decreasing = T)]
